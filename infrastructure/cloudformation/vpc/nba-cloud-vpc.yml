AWSTemplateFormatVersion: '2010-09-09'
Description: 'NBA Network Automation - VPC Infrastructure with public and private subnets'

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: nba-network

  VpcCIDR:
    Description: CIDR block for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  PublicSubnetCIDR:
    Description: CIDR block for the public subnet in AZ1
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  PrivateSubnetCIDR:
    Description: CIDR block for the private subnet in AZ1
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  SSHLocation:
    Description: The IP address range that can be used to SSH to the bastion host
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

Resources:
  # VPC
  NbaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: NBA-Network-Automation

  # Internet Gateway
  NbaInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw
        - Key: Environment
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NbaInternetGateway
      VpcId: !Ref NbaVPC

  # Public Subnet
  NbaPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NbaVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-az1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Public

  # Private Subnet
  NbaPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NbaVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-az1
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Type
          Value: Private

  # Elastic IP for NAT Gateway
  NbaNatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nat-eip
        - Key: Environment
          Value: !Ref EnvironmentName

  # NAT Gateway
  NbaNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NbaNatGatewayEIP.AllocationId
      SubnetId: !Ref NbaPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-nat-gateway
        - Key: Environment
          Value: !Ref EnvironmentName

  # Public Route Table
  NbaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NbaVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-routes
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref NbaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NbaInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NbaPublicRouteTable
      SubnetId: !Ref NbaPublicSubnet

  # Private Route Table
  NbaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NbaVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-routes-az1
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NbaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NbaNatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NbaPrivateRouteTable
      SubnetId: !Ref NbaPrivateSubnet

  # Security Group for Bastion Host
  NbaBastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-bastion-sg
      GroupDescription: Security group for NBA bastion host
      VpcId: !Ref NbaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: Allow SSH from specified location
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-bastion-sg
        - Key: Environment
          Value: !Ref EnvironmentName

  # Security Group for Application Servers
  NbaApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-application-sg
      GroupDescription: Security group for NBA application servers
      VpcId: !Ref NbaVPC
      SecurityGroupIngress:
        # SSH from Bastion
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref NbaBastionSecurityGroup
          Description: Allow SSH from bastion host
        # HTTP from VPC
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCIDR
          Description: Allow HTTP from within VPC
        # HTTPS from VPC
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCIDR
          Description: Allow HTTPS from within VPC
        # Application ports (example: 8080)
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref VpcCIDR
          Description: Allow application traffic from within VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-application-sg
        - Key: Environment
          Value: !Ref EnvironmentName

  # VPC Flow Logs Role
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: '*'

  # VPC Flow Logs
  VPCFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/vpc/${EnvironmentName}
      RetentionInDays: 7

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      ResourceId: !Ref NbaVPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc-flow-logs
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref NbaVPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC-ID

  VPCCidr:
    Description: VPC CIDR Block
    Value: !Ref VpcCIDR
    Export:
      Name: !Sub ${EnvironmentName}-VPC-CIDR

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref NbaPublicSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PUBLIC-SUBNET-ID

  PrivateSubnetId:
    Description: Private Subnet ID
    Value: !Ref NbaPrivateSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PRIVATE-SUBNET-ID

  BastionSecurityGroupId:
    Description: Bastion Security Group ID
    Value: !Ref NbaBastionSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-BASTION-SG-ID

  ApplicationSecurityGroupId:
    Description: Application Security Group ID
    Value: !Ref NbaApplicationSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-APPLICATION-SG-ID

  NatGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NbaNatGateway
    Export:
      Name: !Sub ${EnvironmentName}-NAT-GATEWAY-ID

  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref NbaInternetGateway
    Export:
      Name: !Sub ${EnvironmentName}-IGW-ID