name: Test AWS Credentials

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to test'
        required: false
        default: 'us-east-1'
        type: string

jobs:
  test-credentials:
    name: Test AWS Credentials Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Test AWS Connection
        run: |
          echo "üîê Testing AWS Credentials..."
          echo "Region: ${{ inputs.region }}"
          
          # Test basic AWS connectivity
          echo -e "\nüìç Current caller identity:"
          aws sts get-caller-identity
          
          # List regions to verify API access
          echo -e "\nüåé Available EC2 regions:"
          aws ec2 describe-regions --query 'Regions[?RegionName==`${{ inputs.region }}`].[RegionName,Endpoint]' --output table
          
          # Check VPC permissions (non-destructive)
          echo -e "\nüèüÔ∏è Checking VPC permissions:"
          aws ec2 describe-vpcs --max-results 5 --query 'Vpcs[*].[VpcId,CidrBlock,State]' --output table || echo "No VPCs found or insufficient permissions"
          
          # Check CloudFormation permissions
          echo -e "\nüìã Checking CloudFormation permissions:"
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --max-items 5 --query 'StackSummaries[*].[StackName,StackStatus]' --output table || echo "No stacks found or insufficient permissions"
          
          echo -e "\n‚úÖ AWS Credentials test completed!"

      - name: Check Required Permissions
        run: |
          echo "üîç Checking specific permissions needed for deployment..."
          
          # Test CloudFormation permissions
          echo -e "\nüì¶ CloudFormation Permissions:"
          aws cloudformation validate-template --template-url https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_single_instance_in_subnet.template 2>&1 | grep -q "ValidationError" && echo "‚ùå Missing CloudFormation permissions" || echo "‚úÖ CloudFormation permissions OK"
          
          # Test IAM permissions (needed for creating roles)
          echo -e "\nüë§ IAM Permissions:"
          aws iam list-roles --max-items 1 > /dev/null 2>&1 && echo "‚úÖ IAM list permissions OK" || echo "‚ùå Missing IAM permissions"
          
          # Test EC2 permissions
          echo -e "\nüñ•Ô∏è EC2 Permissions:"
          aws ec2 describe-instances --max-results 5 > /dev/null 2>&1 && echo "‚úÖ EC2 permissions OK" || echo "‚ùå Missing EC2 permissions"
          
          echo -e "\nüìä Permission check completed!"

      - name: Summary
        if: always()
        run: |
          echo "## üìä AWS Credential Test Summary"
          echo "- **AWS Account**: Check the caller identity output above"
          echo "- **Region**: ${{ inputs.region }}"
          echo "- **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "### Next Steps:"
          echo "1. If you see your AWS account ID above, your credentials are working!"
          echo "2. Check for any permission errors in the output"
          echo "3. If you see 'Credentials not found' errors, add AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to GitHub Secrets"
          echo "4. If permissions are missing, update your IAM user/role policies"